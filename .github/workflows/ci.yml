name: Optimized CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

# Cancel previous runs if new commit is pushed
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  FLUTTER_VERSION: '3.32.4'
  JAVA_VERSION: '17'
  NODE_VERSION: '18'

jobs:
  # Fast lint and format check (runs in parallel with everything)
  lint:
    name: Lint & Format
    runs-on: ubuntu-latest
    timeout-minutes: 5
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Flutter with cache
      uses: subosito/flutter-action@v2
      with:
        flutter-version: ${{ env.FLUTTER_VERSION }}
        channel: 'stable'
        cache: true
        cache-key: 'flutter-:os:-:channel:-:version:-:arch:'
        
    - name: Cache pub dependencies
      uses: actions/cache@v4
      with:
        path: |
          ${{ env.PUB_CACHE }}
          ~/.pub-cache
        key: ${{ runner.os }}-pub-${{ hashFiles('**/pubspec.lock') }}
        restore-keys: |
          ${{ runner.os }}-pub-
          
    - name: Get dependencies
      run: flutter pub get
      
    - name: Verify formatting
      run: dart format --output=none --set-exit-if-changed .
      
    - name: Analyze project source
      run: flutter analyze --fatal-warnings

  # Fast test job (minimal, web-only)
  test:
    name: Unit Tests
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Flutter with cache
      uses: subosito/flutter-action@v2
      with:
        flutter-version: ${{ env.FLUTTER_VERSION }}
        channel: 'stable'
        cache: true
        cache-key: 'flutter-:os:-:channel:-:version:-:arch:'
        
    - name: Cache pub dependencies
      uses: actions/cache@v4
      with:
        path: |
          ${{ env.PUB_CACHE }}
          ~/.pub-cache
        key: ${{ runner.os }}-pub-${{ hashFiles('**/pubspec.lock') }}
        restore-keys: |
          ${{ runner.os }}-pub-
          
    - name: Get dependencies
      run: flutter pub get
      
    - name: Run tests
      run: flutter test --coverage --reporter=compact
      
    - name: Upload coverage (if tests pass)
      if: success()
      uses: codecov/codecov-action@v3
      with:
        file: coverage/lcov.info
        flags: unittests
        fail_ci_if_error: false

  # Web build (priority - needed for deployment)
  build-web:
    name: Build Web
    runs-on: ubuntu-latest
    needs: [lint]
    timeout-minutes: 15
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Flutter with cache
      uses: subosito/flutter-action@v2
      with:
        flutter-version: ${{ env.FLUTTER_VERSION }}
        channel: 'stable'
        cache: true
        cache-key: 'flutter-:os:-:channel:-:version:-:arch:'
        
    - name: Cache pub dependencies
      uses: actions/cache@v4
      with:
        path: |
          ${{ env.PUB_CACHE }}
          ~/.pub-cache
        key: ${{ runner.os }}-pub-${{ hashFiles('**/pubspec.lock') }}
        restore-keys: |
          ${{ runner.os }}-pub-
          
    - name: Get dependencies
      run: flutter pub get
      
    - name: Build web app
      run: |
        flutter config --enable-web
        flutter build web --release --dart-define=FLUTTER_WEB_USE_SKIA=false --source-maps
      
    - name: Upload web artifacts
      uses: actions/upload-artifact@v4
      with:
        name: web-build-${{ github.sha }}
        path: build/web/
        retention-days: 7

  # Android build (optional, runs only on main branch)
  build-android:
    name: Build Android
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    needs: [lint]
    timeout-minutes: 25
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Java with cache
      uses: actions/setup-java@v4
      with:
        distribution: 'zulu'
        java-version: ${{ env.JAVA_VERSION }}
        cache: 'gradle'
        
    - name: Setup Flutter with cache  
      uses: subosito/flutter-action@v2
      with:
        flutter-version: ${{ env.FLUTTER_VERSION }}
        channel: 'stable'
        cache: true
        cache-key: 'flutter-:os:-:channel:-:version:-:arch:'
        
    - name: Cache pub dependencies
      uses: actions/cache@v4
      with:
        path: |
          ${{ env.PUB_CACHE }}
          ~/.pub-cache
        key: ${{ runner.os }}-pub-${{ hashFiles('**/pubspec.lock') }}
        restore-keys: |
          ${{ runner.os }}-pub-
          
    - name: Cache Gradle dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
          android/.gradle
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
          
    - name: Get dependencies
      run: flutter pub get
      
    - name: Build APK (release)
      run: |
        flutter build apk --release --split-per-abi
      
    - name: Upload APK artifacts
      if: success()
      uses: actions/upload-artifact@v4
      with:
        name: android-apk-${{ github.sha }}
        path: build/app/outputs/flutter-apk/
        retention-days: 7

  # Deploy job (only for main branch)
  deploy:
    name: Deploy to Firebase
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    needs: [build-web, test]
    timeout-minutes: 10
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download web build artifacts
      uses: actions/download-artifact@v4
      with:
        name: web-build-${{ github.sha }}
        path: build/web/
        
    - name: Setup Node.js with cache
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: package*.json
        
    - name: Install Firebase CLI
      run: npm install -g firebase-tools
      
    - name: Deploy to Firebase Hosting
      run: firebase deploy --only hosting --token ${{ secrets.FIREBASE_TOKEN }}
      env:
        FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}

  # Security scan (runs in background, doesn't block deployment)
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    timeout-minutes: 5
    continue-on-error: true
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Flutter with cache
      uses: subosito/flutter-action@v2
      with:
        flutter-version: ${{ env.FLUTTER_VERSION }}
        channel: 'stable'
        cache: true
        
    - name: Cache pub dependencies
      uses: actions/cache@v4
      with:
        path: |
          ${{ env.PUB_CACHE }}
          ~/.pub-cache
        key: ${{ runner.os }}-pub-${{ hashFiles('**/pubspec.lock') }}
        restore-keys: |
          ${{ runner.os }}-pub-
          
    - name: Get dependencies
      run: flutter pub get
      
    - name: Security audit
      run: |
        echo "üîç Checking for security issues..."
        flutter pub deps --style=compact | head -20
        find . -name "*.key" -o -name "*.pem" -o -name "*secret*" -o -name "*.env" | grep -v node_modules || echo "‚úÖ No sensitive files found"